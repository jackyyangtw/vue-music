第一次載入的時候沒有讀取歌曲，需要修正

(讓使用者刪除留言)


首頁歌曲 < 5 的話就不要執行infinit scroll


PWA offline時，上傳檔案的話會出現 error message

完成:
重新註冊會無法更改userData
https://medium.com/firebase-tips-tricks/how-to-fix-firestore-error-permission-denied-missing-or-insufficient-permissions-777d591f404

只有一開始會fetch，如果沒有上傳新資料就不會fetch data

讓user可以更新email

songItem user 如果有更改名稱，名稱不會變更 (更新songCollection?)
https://stackoverflow.com/questions/38559457/firebase-v3-updateprofile-method

更新密碼時，confirm rules會 dynamic change

fix 無法切換歌曲的 bug 

重播會無法循環撥放

點選player 歌曲名稱可連到詳情頁(如果在不同首歌的詳情頁點選，頁面的資料不會變)
解決: beforeUpdate 重新 fetch 資料，並且要傳入commet 資料

user info 圖片希望改成背景
解決: dynamic style

優化mobile排版



errors:
Error enabling offline persistence. Falling back to persistence disabled: FirebaseError: [code=failed-precondition]: Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.
Firebase persistance error failed-precondition

https://stackoverflow.com/questions/60189243/vue-cli-3-pwa-deploying-to-production-netlify-gives-workbox-error-bad-precachin

https://answers.netlify.com/t/workbox-error-precachecontroller-mjs-194-uncaught-in-promise-bad-precaching-response-redirects-wb-revision-404/8865






import { shallowMount } from "@vue/test-utils";
import HomeView from "../../views/HomeView.vue";
import SongItem from "../SongItem.vue";
import { expect } from "vitest";
import { createPinia } from "pinia";
import { createApp } from "vue";

// 測試HomeView.vue是否正常render SongItem.vue
describe("HomeView.vue", () => {
  let pinia;
  const app = createApp({});

  beforeEach(() => {
    pinia = createPinia();
    app.use(pinia);
  });

  test("render list of songs", () => {
    const songs = [{}, {}, {}];
    const component = shallowMount(HomeView, {
      data() {
        return {
          songs,
        };
      },
      global: {
        mocks: {
          $t: (msg) => msg,
        },
      },
    });
    const items = component.findAllComponents(SongItem);

    expect(items).toHaveLength(songs.length);
  });
});

